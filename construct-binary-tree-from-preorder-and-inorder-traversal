/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* construct(vector<int>& preorder,  unordered_map<int,int> &map,int &index,int i,int j)
    {
        if(i>j)
        {
            return NULL;
        }
        TreeNode *root=new TreeNode(preorder[index++]);

        int mid=map[root->val];

        root->left=construct(preorder,map,index,i,mid-1);

        root->right=construct(preorder,map,index,mid+1,j);

        return root;
    } 
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
       unordered_map<int,int>map;
        for(int i=0;i<inorder.size();i++)
        {
            map[inorder[i]]=i;
        }

        int index=0;
        return construct(preorder,map,index,0,inorder.size()-1);

}

};
