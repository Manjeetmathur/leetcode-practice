class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        ios_base :: sync_with_stdio(false);
        cin.tie(NULL);


        int n=points.size();
        vector<pair<int,pair<int,int>>>v;

        int dist;

        for(auto it : points)
        {
            dist = it[0]*it[0] + it[1]*it[1];
            v.push_back({dist,{it[0],it[1]}});

        }
        sort(v.begin(),v.end());

        vector<vector<int>> ans(k);
        for(int i=0;i<k;i++)
        {
            ans[i].push_back(v[i].second.first);
            ans[i].push_back(v[i].second.second);
        }
        return ans;
    }
    // int n=points.size();
    // multimap<int,int>myMap;
    // for(int i=0;i<n;i++)
    // {
    //     myMap.insert({points[i][0] * points[i][0]+points[i][1]*points[i][1],i});
    // }
    // vector<vector<int,int>>ans;

    // int count =0;
    // for(auto it = myMap.begin();count<k ; ++it,++count)
    // {
    //     ans.push_back(points[it->second]);
    // }
    // return  ans;
    // }
};
