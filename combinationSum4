// class Solution {
// public:
// int n;
// int t[201][1001];
// int solve(int idx,vector<int>& nums, int target)
// {
//     if(target == 0)
//         return 1;
//     if(idx >= n or target < 0 )
//         return 0;

//     if(t[idx][target] != -1)
//         return t[idx][target];

//     int take_idx= solve(0,nums,target-nums[idx]);
//     int ignore_idx = solve(idx+1,nums,target);

//     return  t[idx][target]=take_idx + ignore_idx;
// }
//     int combinationSum4(vector<int>& nums, int target) {
//         n=nums.size();
//         memset(t,-1,sizeof(t));
//         return solve(0,nums,target);
//     }
// };
class Solution {
public:
int n;
int t[201][1001];
int solve(int idx,vector<int>& nums, int target)
{
    if(target == 0)
        return 1;
    if(idx >= n or target < 0 )
        return 0;

    if(t[idx][target] != -1)
        return t[idx][target];

   int result= 0;
   for(int i=0;i<n;i++)
   {
        int take_i=solve(0,nums,target-nums[i]);
        result += take_i;
   }

    return  t[idx][target]=result;
}
    int combinationSum4(vector<int>& nums, int target) {
        n=nums.size();
        memset(t,-1,sizeof(t));
        return solve(0,nums,target);
    }
};
