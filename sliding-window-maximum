class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();

        deque<int>dq;
        vector<int> ans;
        
        for(int i=0;i<n;i++)
        {
            //step1 :-

            //when new elements comes nums[i] , make space for it
            //(!window size can't be greater than k)
            while( !dq.empty() and dq.front() <= i-k)
            {
                dq.pop_front();
            }

            //step2:-

            //Now, when nums[i] comes, there is no need to keep small 
            //elements in that window , pop them
            while(!dq.empty() && nums[i] > nums[dq.back()])
            {
                dq.pop_back();
            }

            //step 3 :-
            // Now ,push i in deque -> for nums[i]
            dq.push_back(i);

            // step 4 :-
            // if( i >= k-1) , then dq.front is our answere for that window
            if( i >= k-1)
            {
                ans.push_back(nums[dq.front()]);
            }
        }
        return ans;
    }
};
