class Solution {
public:
    bool dfsRec(int i,vector<bool>&visited,vector<bool>&currVisited,vector<int>adj[])
    {
        visited[i] = true;
        currVisited[i] =true;

        vector<int>data = adj[i];

        for(auto x : data)
        {
            if(!visited[x])
            {
                if(dfsRec(x,visited,currVisited,adj))
                {
                    return true;
                }
                 
            }
            else if(visited[x] && currVisited[x])
            {
                return true;
            }
           
        }
        currVisited[i]=false;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        int n = numCourses;
        vector<bool>visited(n,false), currVisited(n,false);

        vector<int> adj[n];

        for(auto it : prerequisites)
        {
            vector<int>data=it;
            int a = data[0];
            int b = data[1];

            adj[a].push_back(b);
        }

        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                if(dfsRec(i,visited,currVisited,adj)){
                    return false;
                }
            }
        }
        return true;
    }
};
