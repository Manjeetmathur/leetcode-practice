class Solution {
public:
vector<vector<int>>res;
void helper(int i,int target,vector<int> &candidates,vector<int> &temp)
{
    if(target==0)
    {
        res.push_back(temp);
        return;
    }
    if(i<0) return;

    if(target >= candidates[i])
    {
        temp.push_back(candidates[i]);
        helper(i-1,target-candidates[i],candidates,temp);
        temp.pop_back();

    }
    int j=i-1;
    while(j>=0 and candidates[i] == candidates[j])
    {
        j--;
    }
    helper(j,target,candidates,temp);

}

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int n=candidates.size();
        sort(candidates.begin(),candidates.end());
        vector<int> temp;
        helper(n-1,target,candidates,temp);
        return res;
    }
};
