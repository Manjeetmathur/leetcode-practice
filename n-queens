class Solution {
public:
void addSolution(vector<vector<int>> &ans,vector<vector<int>> &board,int n)
{
	vector<int>temp;
	for(int i=0;i<n; i++)
	{
		for(int j=0;j<n;j++)
		{
			temp.push_back(board[i][j]);
		}
	}
	ans.push_back(temp);
}
bool isSafe(int row,int col,vector<string> &board,int n)
{
	int x=row;
	int y=col;

	while(y>=0)
	{
		if(board[x][y] == 'Q')
			return false;
		y--;
	}
	x=row;y=col;
	while(x>=0 && y>=0)
	{
		if(board[x][y]=='Q')
			return false;
		y--;
		x--;
	}
	x=row;y=col;
	while(x<n && y>=0)
	{
		if(board[x][y] == 'Q')
			return false;
		y--;
		x++;
	}
	return true;
}
void solve(int col,vector<vector<string>> &ans,vector<string>&board,int n)
{
	if(col==n)
	{
		ans.push_back(board);
		return;
	}
	for(int row=0;row<n;row++)
	{
		if(isSafe(row,col,board,n))
		{
			board[row][col]='Q';
			solve(col+1,ans,board,n);
			board[row][col]='.';
		}
	}
}
    vector<vector<string>> solveNQueens(int n) {
     vector<string>board(n);
	vector<vector<string>>ans;
    string s(n,'.');
    for(int i=0;i<n;i++)
    {
        board[i]=s;
    }
	solve(0,ans,board,n);

	return ans;
    }
};
