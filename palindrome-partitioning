class Solution {
public:

    bool isPal(string s,int start,int end)
    {
        while(start<end)
        {
            if(s[start] != s[end])  return false;
            ++start;--end;
        }
        return true;
    }
    void backtrack(string s,int st,vector<string> &buff,vector<vector<string>> &result)
    {
        if(st == s.size())
        {
            result.push_back(buff);
            return ;
        }
        for(int ed=st;ed<s.size();ed++)
        {
            if(isPal(s,st,ed))
            {
                buff.push_back(s.substr(st,ed-st+1));
                backtrack(s,ed+1,buff,result);
                buff.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> buff;
        backtrack(s,0,buff,result);
        return result;


    }
};
